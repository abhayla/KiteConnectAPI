/*
        ARTHACHITRA MAKES NO REPRESENTATION ABOUT THE SUITABILITY OF THIS SOURCE CODE FOR ANY 
        PURPOSE. IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND. ARTHACHITRA DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOURCE CODE, 
        INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL ARTHACHITRA BE LIABLE FOR ANY 
        SPECIAL, INDIRECT, INCEDENTAL, OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION, ARISING 
        OUT OF OR IN CONNECTION WITH THE USE OR PERFORMACE OF THIS SOURCE CODE.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace KiteConnectAPI
{
    /// <summary>
    /// Gets the kite api's end points
    /// </summary>
    public static class Url
    {
        private static readonly string rootUrl = "https://api.kite.trade";

        /// <summary>
        /// Gets the root url
        /// </summary>
        public static string Root
        {
            get { return rootUrl; }
        }

        /// <summary>
        /// Gets the login url
        /// </summary>
        /// <param name="apiKey">Api key</param>
        /// <param name="version">Kite connect version</param>
        /// <returns></returns>
        public static string Login(string apiKey, string version)
        {
            return $"https://kite.trade/connect/login?v={version}&api_key={apiKey}";
            //return $"{Root}/connect/login?v={version}&api_key={apiKey}";
        }

        /// <summary>
        /// Gets the session token url
        /// </summary>
        /// <returns></returns>
        public static string Token(string apiKey = null, string accessToken = null, string checksum = null)
        {
            if (string.IsNullOrEmpty(apiKey) && string.IsNullOrEmpty(accessToken))
            {
                return $"{Root}/session/token";
            }
            return $"{Root}/session/token?api_key={apiKey}&access_token={accessToken}";
        }

        /// <summary>
        /// Gets the profile url
        /// </summary>
        /// <returns></returns>
        public static string Profile()
        {
            return $"{Root}/user/profile";
        }

        

        /// <summary>
        /// Gets the url to fetch user's margin information
        /// </summary>
        /// <param name="segment">Optional, Segment - 'equity' or 'commodity'</param>
        /// <returns></returns>
        public static string Margins(string segment = null)
        {
            if (string.IsNullOrEmpty(segment))
            {
                return $"{Root}/user/margins";
            }

            return $"{Root}/user/margins/{segment}";
        }


        
        /// <summary>
        /// Gets the order url
        /// </summary>
        /// <param name="orderId">Order id. If defined then retrieves the order history of that particular order</param>
        /// <returns></returns>
        public static string Orders(string orderId = null)
        {
            if (string.IsNullOrEmpty(orderId))
            {
                return $"{Root}/orders";
            }

            return $"{Root}/orders/{orderId}";
        }

        
        /// <summary>
        /// Gets the trades url
        /// </summary>
        /// <param name="orderId">Order id. If defined then retrieves the trades generated by the order</param>
        /// <returns></returns>
        public static string Trades(string orderId = null)
        {
            if (string.IsNullOrEmpty(orderId))
            {
                return $"{Root}/trades";
            }
            return $"{Root}/orders/{orderId}/trades";
        }


        /// <summary>
        /// Gets the orders url to place (POST), modify (PUT) or cancel (DELETE) an order
        /// </summary>
        /// <param name="variety">Optional, Variety. Default value is 'regular'</param>
        /// <param name="orderId">Optional, Order id. If defined will modify (PUT) or cancels (DELETE) the specified order</param>
        /// <returns></returns>
        public static string PlaceOrder(string variety = "regular", string orderId = null)
        {
            if (string.IsNullOrEmpty(orderId))
            {
                return $"{Root}/orders/{variety}";
            }
            return $"{Root}/orders/{variety}/{orderId}";
        }

        
        
        /// <summary>
        /// Gets the holding url
        /// </summary>
        /// <returns></returns>
        public static string Holdings()
        {
            return $"{Root}/portfolio/holdings";
        }

        /// <summary>
        /// Gets the positions url
        /// </summary>
        /// <returns></returns>
        public static string Positions()
        {
            return $"{Root}/portfolio/positions";
        }



        /// <summary>
        /// Gets the instrument url by exchange
        /// </summary>
        /// <param name="exchange">Exchange. If defined then will retrieve the CSV dump for that exchange only</param>
        /// <returns></returns>
        public static string Instrument(string exchange = null)
        {
            if (string.IsNullOrEmpty(exchange))
            {
                return $"{Root}/instruments";
            }

            return $"{Root}/instruments/{exchange}";
        }

        /// <summary>
        /// Gets the url for calling quotes
        /// </summary>
        /// <param name="url"></param>
        /// <param name="symbols"></param>
        /// <returns></returns>
        private static string Quotes(string url, string[] symbols)
        {
            string retVal = $"{url}?";
            if (symbols == null)
                return retVal;

            for (int i = 0; i < symbols.Length; i++)
            {
                if (string.IsNullOrEmpty(symbols[i]))
                    continue;

                retVal += $"i={symbols[i].Trim()}&";
            }

            return retVal.TrimEnd('&');
        }


        /// <summary>
        /// Retrieve full market quotes for one or more instruments
        /// </summary>
        /// <returns></returns>
        public static string Quote(string[] symbols)
        {
            return Quotes($"{Root}/quote", symbols);
        }

        

        /// <summary>
        /// Retrieve OHLC quotes for one or more instruments
        /// </summary>
        /// <returns></returns>
        public static string OHLC(string[] symbols)
        {
            return Quotes($"{Root}/quote/ohlc", symbols);
        }

        /// <summary>
        /// Retrieve LTP quotes for one or more instruments
        /// </summary>
        /// <returns></returns>
        public static string LTP(string[] symbols)
        {
            return Quotes($"{Root}/quote/ltp", symbols);
        }

        /// <summary>
        /// Gets the websocket url
        /// </summary>
        /// <param name="apiKey">Api key</param>
        /// <param name="accessToken">Access token</param>
        /// <param name="publicToken">Optional, public token</param>
        /// <returns></returns>
        public static string Websocket(string apiKey, string accessToken, string publicToken = null)
        {
            if (string.IsNullOrEmpty(publicToken))
                return $"wss://ws.kite.trade?api_key={apiKey}&access_token={accessToken}";

            return $"wss://ws.kite.trade?api_key={apiKey}&access_token={accessToken}&public_token={publicToken}";
        }


        /// <summary>
        /// Gets the candles url
        /// </summary>
        /// <param name="instrumentToken">Instrument token</param>
        /// <param name="interval">Interval</param>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <returns></returns>
        public static string Candles(int instrumentToken, string interval, DateTime from, DateTime to, bool isContinuous)
        {
            if (isContinuous)
            {
                return string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0}/instruments/historical/{1}/{2}?from={3:yyyy-MM-dd HH:mm:ss}&to={4:yyyy-MM-dd HH:mm:ss}&continuous=1", Root, instrumentToken, interval, from, to);
            }
            ////https://api.kite.trade/instruments/historical/5633/minute?from=2015-12-28&to=2016-01-01&api_key=xxx&access_token=yyy
            return string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0}/instruments/historical/{1}/{2}?from={3:yyyy-MM-dd HH:mm:ss}&to={4:yyyy-MM-dd HH:mm:ss}&api_key={1}&access_token={2}", Root, instrumentToken, interval, from, to);
        }

        /// <summary>
        /// Gets the url to place a mutual fund order (POST) or retrieve the list of all orders (GET)
        /// </summary>
        /// <param name="orderId">Order Id. If defined will cancel the defined order (DELETE) or will get the order history (GET)</param>
        /// <returns></returns>
        public static string MfOrder(string orderId = null)
        {
            if (string.IsNullOrEmpty(orderId))
            {
                return $"{Root}/mf/orders";
            }

            return $"{Root}/mf/orders/{orderId}";
        }


        /// <summary>
        /// Gets the url to place a sim order (POST) or retrieves the list of all sip orders (GET)
        /// </summary>
        /// <param name="orderId">Optional, Order Id. If defined will cancel the defined order (DELETE) or will get the order history (GET)</param>
        /// <returns></returns>
        public static string SipOrder(string orderId = null)
        {
            if (string.IsNullOrEmpty(orderId))
            {
                return $"{Root}/mf/sips";
            }

            return $"{Root}/mf/sips/{orderId}";
        }

        /// <summary>
        /// Gets the url to retrieve the mutual fund holdings in the demat account
        /// </summary>
        /// <returns></returns>
        public static string MfHoldings()
        {
            return $"{Root}/mf/holdings";
        }
        
        /// <summary>
        /// Gets the url to retrieve the master list of all mutual funds available
        /// </summary>
        /// <returns></returns>
        public static string MfInstruments()
        {
            return $"{Root}/mf/instruments";
        }


        

    }
}
